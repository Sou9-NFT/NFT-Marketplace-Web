{% extends 'base.html.twig' %}

{% block title %}Connect Wallet - NFT Marketplace{% endblock %}

{% block body %}
    <!-- ***** Breadcrumb Area Start ***** -->
    <section class="breadcrumb-area overlay-dark d-flex align-items-center">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <!-- Breamcrumb Content -->
                    <div class="breadcrumb-content text-center">
                        <h2 class="m-0">Wallet Connect</h2>
                        <ol class="breadcrumb d-flex justify-content-center">
                            <li class="breadcrumb-item"><a href="{{ path('app_home_page') }}">Home</a></li>
                            <li class="breadcrumb-item active">Wallet Connect</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ***** Breadcrumb Area End ***** -->

    <!-- ***** Wallet Connect Area Start ***** -->
    <section class="wallet-connect-area">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-12 col-md-8 col-lg-7">
                    <!-- Intro -->
                    <div class="intro text-center">
                        <span>Wallet Connect</span>
                        <h3 class="mt-3 mb-0">Connect your Wallet</h3>
                        <p>Connect your cryptocurrency wallet to access and manage your ESPRIT DAN tokens.</p>
                    </div>
                </div>
            </div>
            <div class="row justify-content-center items">
                <div class="col-12 col-md-6 col-lg-4 item">
                    <!-- Single Wallet -->
                    <div class="card single-wallet">
                        <div class="d-block text-center" id="metamask-connect">
                            <img class="avatar-lg" src="{{ asset('front_office/img/content/metamask.png') }}" alt="">
                            <h4 class="mb-0">MetaMask</h4>
                            <p>A browser extension with great flexibility. The web's most popular wallet</p>
                            <div id="wallet-connect-section">
                                <button class="btn btn-bordered-white mt-3" onclick="connectMetaMask()">Connect Wallet</button>
                            </div>
                            <div id="wallet-status" class="mt-3" style="display: none;">
                                <p class="text-success">Connected: <span id="wallet-address"></span></p>
                                <p class="text-white">ETH Balance: <span id="eth-balance"></span> ETH</p>
                                <p class="text-white">Token Balance: <span id="wallet-balance"></span> ESPRIT DAN</p>
                                <div class="token-tutorial mt-3">
                                    <h5>How to Import ESPRIT DAN Token:</h5>
                                    <ol class="text-left">
                                        <li>Switch to Sepolia Test Network in MetaMask</li>
                                        <li>Click "Import tokens" in MetaMask</li>
                                        <li>
                                            Paste contract address: 
                                            <span class="contract-address" onclick="copyContractAddress()" style="cursor: pointer; color: #6a8eff;">
                                                0x44Ab62a8DFC2d8403E27F4b85717Cc3b986d1801
                                            </span>
                                            <span class="copy-tooltip" style="display: none; font-size: 0.8em; color: #28a745;">Copied!</span>
                                        </li>
                                        <li>Token Symbol: ESPRIT DAN</li>
                                        <li>Token Decimal: 3</li>
                                    </ol>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-4 item">
                    <!-- Single Wallet -->
                    <div class="card single-wallet">
                        <div class="d-block text-center">
                            <img class="avatar-lg" src="{{ asset('front_office/img/content/walletconnect.png') }}" alt="">
                            <h4 class="mb-0">WalletConnect</h4>
                            <p>Pair with Trust, Argent, MetaMask & more. Works from any browser, without an extension</p>
                            <button class="btn btn-bordered-white mt-3" disabled>Coming Soon</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ***** Wallet Connect Area End ***** -->
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .token-tutorial {
            background: rgba(106, 142, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .token-tutorial ol {
            padding-left: 20px;
        }

        .token-tutorial li {
            margin: 8px 0;
            color: #f5f5f5;
        }

        .contract-address {
            background: rgba(106, 142, 255, 0.2);
            padding: 4px 8px;
            border-radius: 4px;
            font-family: monospace;
            transition: background-color 0.3s;
        }

        .contract-address:hover {
            background: rgba(106, 142, 255, 0.3);
        }

        .copy-tooltip {
            margin-left: 8px;
            padding: 2px 6px;
            background: #28a745;
            border-radius: 4px;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('front_office/js/wallet-service.js') }}"></script>
    <script>
        async function updateWalletUI(address, balance = null) {
            const walletStatus = document.getElementById('wallet-status');
            const walletAddress = document.getElementById('wallet-address');
            const walletBalance = document.getElementById('wallet-balance');
            const ethBalance = document.getElementById('eth-balance');
            const connectSection = document.getElementById('wallet-connect-section');
            
            if (address) {
                walletStatus.style.display = 'block';
                connectSection.style.display = 'none';
                walletAddress.textContent = address.slice(0, 6) + '...' + address.slice(-4);
                
                // Update token balance if provided
                if (balance !== null) {
                    walletBalance.textContent = parseFloat(balance).toFixed(3);
                }

                // Get ETH balance
                try {
                    const ethBalanceWei = await window.ethereum.request({
                        method: 'eth_getBalance',
                        params: [address, 'latest']
                    });
                    const ethBalanceInEth = web3.utils.fromWei(ethBalanceWei, 'ether');
                    ethBalance.textContent = parseFloat(ethBalanceInEth).toFixed(4);
                } catch (error) {
                    console.error('Error fetching ETH balance:', error);
                    ethBalance.textContent = 'Error loading balance';
                }

                // Get token balance if not provided
                if (balance === null) {
                    try {
                        const newBalance = await window.walletService.getBalance(address);
                        walletBalance.textContent = parseFloat(newBalance).toFixed(3);
                    } catch (error) {
                        console.error('Error fetching balance:', error);
                        walletBalance.textContent = 'Error loading balance';
                    }
                }
            } else {
                walletStatus.style.display = 'none';
                connectSection.style.display = 'block';
            }
        }

        async function connectMetaMask() {
            try {
                const result = await window.walletService.connectMetaMask();
                updateWalletUI(result.address, result.balance);
                
                // Store wallet address in session
                fetch('{{ path('app_connect_wallet') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ address: result.address })
                });
            } catch (error) {
                alert('Failed to connect wallet: ' + error.message);
            }
        }

        // Check if wallet is already connected
        if (window.walletService && window.walletService.isConnected()) {
            const account = window.walletService.getCurrentAccount();
            if (account) {
                updateWalletUI(account);
            }
        }

        // Listen for account changes
        window.addEventListener('walletAccountChanged', async (event) => {
            updateWalletUI(event.detail.account);
        });

        window.addEventListener('walletDisconnected', () => {
            updateWalletUI(null);
        });

        // Listen for chain/network changes to update balance
        if (window.ethereum) {
            window.ethereum.on('chainChanged', () => {
                const account = window.walletService.getCurrentAccount();
                if (account) {
                    updateWalletUI(account);
                }
            });
        }

        function copyContractAddress() {
            const address = '0x44Ab62a8DFC2d8403E27F4b85717Cc3b986d1801';
            navigator.clipboard.writeText(address).then(() => {
                const tooltip = document.querySelector('.copy-tooltip');
                tooltip.style.display = 'inline';
                setTimeout(() => {
                    tooltip.style.display = 'none';
                }, 2000);
            });
        }
    </script>
{% endblock %}